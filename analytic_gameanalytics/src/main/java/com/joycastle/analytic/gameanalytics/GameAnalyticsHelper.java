package com.joycastle.analytic.gameanalytics;import android.app.Activity;import android.app.Application;import android.content.Intent;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.os.Bundle;import android.util.Log;import com.gameanalytics.sdk.GAProgressionStatus;import com.gameanalytics.sdk.GAResourceFlowType;import com.gameanalytics.sdk.GameAnalytics;import com.joycastle.gamepluginbase.LifeCycleDelegate;import com.joycastle.gamepluginbase.SystemUtil;import java.util.Currency;import java.util.Locale;public class GameAnalyticsHelper implements LifeCycleDelegate {    private static final String TAG = "GameAnalyticsHelper";    private static GameAnalyticsHelper instance = new GameAnalyticsHelper();    public static GameAnalyticsHelper getInstance() {        return instance;    }    private GameAnalyticsHelper() {}    @Override    public void init(Application application) {        Log.i(TAG, "init: ");    }    @Override    public void onCreate(Activity activity, Bundle savedInstanceState) {        // Enable log        GameAnalytics.setEnabledInfoLog(true);        GameAnalytics.setEnabledVerboseLog(true);        // Configure available virtual currencies and item types        GameAnalytics.configureAvailableResourceCurrencies("Chips", "Lottery");        GameAnalytics.configureAvailableResourceItemTypes("Default",                "Room",                "SideBet",                "Tournament",                "MiniGame",                "Gift",                "Free",                "Lottery",                "Chest",                "Achievement",                "Challenge",                "Charge");        // Configure available custom dimensions        GameAnalytics.configureAvailableCustomDimensions01("FacebookLogin", "Guest");        String versionName = "0";        try {            PackageInfo packageInfo = activity.getPackageManager().getPackageInfo(activity.getPackageName(), 0);            versionName = packageInfo.versionName;        } catch (PackageManager.NameNotFoundException e) {            e.printStackTrace();        }        // Configure build version        GameAnalytics.configureBuild(versionName);        String gameKey = SystemUtil.getInstance().getPlatCfgValue("gameanalytics_game_key");        String secretKey = SystemUtil.getInstance().getPlatCfgValue("gameanalytics_secret_key");        // Initialize        GameAnalytics.initializeWithGameKey(activity, gameKey, secretKey);        Log.i(TAG, "onCreate: ");    }    @Override    public void onStart(Activity activity) {    }    @Override    public void onResume(Activity activity) {    }    @Override    public void onPause(Activity activity) {    }    @Override    public void onStop(Activity activity) {    }    @Override    public void onDestroy(Activity activity) {    }    @Override    public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {    }    public void gameAnalyticBussiness(String iapId, String itemType, String itemId, String cartType, double price) {        Currency currency = Currency.getInstance(Locale.US);        String currencyCode = currency.getCurrencyCode();        int priceInCents = (int)(price*100);        GameAnalytics.addBusinessEventWithCurrency(currencyCode,priceInCents,itemType,itemId,cartType);    }    public void gameAnalyticResSource(String currency,  int amount, String itemType, String itemId) {        GameAnalytics.addResourceEventWithFlowType(GAResourceFlowType.Source,currency,amount,itemType,itemId);    }    public void gameAnalyticResSink(String currency, int amount, String itemType, String itemId) {        GameAnalytics.addResourceEventWithFlowType(GAResourceFlowType.Sink,currency,amount,itemType,itemId);    }    public void gameAnalyticDesignEvent(String eventId) {        GameAnalytics.addDesignEventWithEventId(eventId);    }    public void gameAnalyticDesignEvent(String eventId, double value) {        GameAnalytics.addDesignEventWithEventId(eventId,value);    }    public void gameAnalyticCustomDimesion(String dimesion) {        GameAnalytics.setCustomDimension01(dimesion);    }    public void gameAnalyticProgressionStart(String progression1, String progression2, String progression3) {        GameAnalytics.addProgressionEventWithProgressionStatus(GAProgressionStatus.Start, progression1, progression2, progression3);    }    public void gameAnalyticProgressionFail(String progression1, String progression2, String progression3) {        GameAnalytics.addProgressionEventWithProgressionStatus(GAProgressionStatus.Fail, progression1, progression2, progression3);    }    public void gameAnalyticProgressionComplete(String progression1, String progression2, String progression3,double score) {        GameAnalytics.addProgressionEventWithProgressionStatus(GAProgressionStatus.Complete, progression1, progression2, progression3, score);    }}